{"version":3,"file":"static/webpack/static/development/pages/index.js.0b6232ccba8ae49d4c37.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, {useState, useCallback, useEffect} from 'react'\nimport {useRouter} from 'next/router'\nimport PropTypes from 'prop-types'\nimport {groupBy, uniq, indexOf} from 'lodash'\n\nimport records from '../chiffres-cles.json'\nimport centers from '../centers.json'\n\nimport theme from '../styles/theme'\n\nimport Page from '../layouts/main'\n\nimport {\n  casConfirmesLayer,\n  casConfirmesCountLayer,\n  decesLayer,\n  decesCountLayer,\n  hospitalisesLayer,\n  hospitalisesCountLayer,\n  reanimationLayer,\n  reanimationCountLayer,\n  guerisLayer,\n  guerisCountLayer\n} from '../components/react-map-gl/layers'\n\nimport ScreenPage from '../layouts/screen'\nimport MobilePage from '../layouts/mobile'\n\nexport const AppContext = React.createContext()\nexport const ThemeContext = React.createContext('theme.default')\n\nconst reportToGeoJSON = (report, date) => {\n  return {\n    type: 'FeatureCollection',\n    features: Object.keys(report).filter(code => Boolean(centers[code])).map(code => {\n      const selectedDateAvailable = report[code].find(r => r.date === date)\n      const properties = selectedDateAvailable ? selectedDateAvailable : {code}\n\n      return {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: centers[code]\n        },\n        properties: {\n          ...properties,\n          ...report[code].find(r => r.date === date),\n          history: report[code].filter(r => date >= r.date)\n        }\n      }\n    }).filter(i => Boolean(i))\n  }\n}\n\nconst defaultViewport = {\n  latitude: 46.9,\n  longitude: 1.7,\n  zoom: 5\n}\n\nconst MainPage = ({data, dates, isGouv}) => {\n  const router = useRouter()\n\n  const [isIframe, setIsIframe] = useState(false)\n  const [isMobileDevice, setIsMobileDevice] = useState(false)\n  const [isTouchScreenDevice, setIsTouchScreenDevice] = useState(false)\n  const [date, setDate] = useState(dates[dates.length - 1])\n  const [selectedLocation, setSelectedLocation] = useState(null)\n  const [selectedLocationReport, setSelectedLocationReport] = useState(null)\n  const [selectedPreviousLocationReport, setSelectedPreviousLocationReport] = useState(null)\n  const [franceReport, setFranceReport] = useState({})\n  const [previousFranceReport, setPreviousFranceReport] = useState({})\n  const [regionsReport, setRegionsReport] = useState({})\n  const [previousRegionsReport, setPreviousRegionsReport] = useState({})\n  const [departementsReport, setDepartementsReport] = useState({})\n  const [previousDepartementsReport, setPreviousDepartementsReport] = useState({})\n  const [viewport, setViewport] = useState(defaultViewport)\n\n  const dateIdx = indexOf(dates, date)\n\n  const previousReport = useCallback(() => {\n    const idx = indexOf(dates, date)\n    const previousIdx = idx - 1\n\n    if (previousIdx >= 0) {\n      setDate(dates[previousIdx])\n    }\n  }, [dates, date])\n\n  const nextReport = useCallback(() => {\n    const idx = indexOf(dates, date)\n    const nextIdx = idx + 1\n    if (nextIdx <= dates.length - 1) {\n      setDate(dates[nextIdx])\n    }\n  }, [dates, date])\n\n  const getFranceReport = useCallback(() => {\n    const reports = data.filter((item => item.nom === 'France'))\n    return {\n      ...reports.find(r => r.date === date),\n      history: reports\n    }\n  }, [date, data])\n\n  const getPreviousFranceReport = useCallback(() => {\n    const reports = data.filter((item => item.nom === 'France'))\n    const idx = indexOf(dates, date)\n    const previousIdx = idx - 1\n    const previousDate = dates[previousIdx]\n    return {\n      ...reports.find(r => r.date === previousDate),\n      history: reports\n    }\n  }, [dates, date, data])\n\n  const getRegionsReport = useCallback(() => {\n    const regions = data.filter((item => item.code.includes('REG')))\n    const byCode = groupBy(regions, 'code')\n\n    return reportToGeoJSON(byCode, date)\n  }, [date, data])\n\n  const getPreviousRegionsReport = useCallback(() => {\n    const regions = data.filter((item => item.code.includes('REG')))\n    const byCode = groupBy(regions, 'code')\n    const idx = indexOf(dates, date)\n    const previousIdx = idx - 1\n    const previousDate = dates[previousIdx]\n\n    return reportToGeoJSON(byCode, previousDate)\n  }, [dates, date, data])\n\n  const getPreviousDepartementsReport = useCallback(() => {\n    const departements = data.filter((item => item.code.includes('DEP')))\n    const byCode = groupBy(departements, 'code')\n    const idx = indexOf(dates, date)\n    const previousIdx = idx - 1\n    const previousDate = dates[previousIdx]\n\n    return reportToGeoJSON(byCode, previousDate)\n  }, [dates, date, data])\n\n  const getDepartementsReport = useCallback(() => {\n    const departements = data.filter((item => item.code.includes('DEP')))\n    const byCode = groupBy(departements, 'code')\n\n    return reportToGeoJSON(byCode, date)\n  }, [date, data])\n\n  const handleResize = () => {\n    const mobileWidth = parseInt(theme.mobileDisplay.split('px')[0])\n    setIsMobileDevice(window.innerWidth < mobileWidth)\n  }\n\n  const getLocationReport = useCallback(code => {\n    let report\n\n    if (code.includes('REG')) {\n      report = regionsReport\n    } else if (code.includes('DEP')) {\n      report = departementsReport\n    }\n    const feature = report.features.find(f => f.properties.code === code)\n    return {...feature.properties}\n  }, [regionsReport, departementsReport])\n\n  const getPreviousLocationReport = useCallback(code => {\n    let report\n\n    if (code.includes('REG')) {\n      report = previousRegionsReport\n    } else if (code.includes('DEP')) {\n      report = previousDepartementsReport\n    }\n\n    const feature = report.features.find(f => f.properties.code === code)\n    return {...feature.properties}\n  }, [previousRegionsReport, previousDepartementsReport])\n\n  useEffect(() => {\n    if (selectedLocation) {\n      const locationReport = getLocationReport(selectedLocation)\n      setSelectedLocationReport(locationReport)\n      setSelectedPreviousLocationReport(locationReport)\n    } else {\n      setSelectedLocationReport(null)\n      setSelectedPreviousLocationReport(null)\n    }\n  }, [regionsReport, selectedLocation, getLocationReport])\n\n  useEffect(() => {\n    if (selectedLocation) {\n      const locationReport = getPreviousLocationReport(selectedLocation)\n      setSelectedPreviousLocationReport(locationReport)\n    } else {\n      setSelectedPreviousLocationReport(null)\n    }\n  }, [previousRegionsReport, selectedLocation, getPreviousLocationReport])\n\n  useEffect(() => {\n    const {latitude, longitude} = viewport\n    setViewport({\n      latitude,\n      longitude,\n      zoom: isMobileDevice ? 4.3 : 5\n    })\n  }, [isMobileDevice]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    const {iframe} = router.query\n\n    setIsIframe(Boolean(iframe === '1'))\n  }, [router])\n\n  useEffect(() => {\n    const franceReport = getFranceReport()\n    setFranceReport(franceReport)\n\n    const previousFranceReport = getPreviousFranceReport()\n    setPreviousFranceReport(previousFranceReport)\n\n    const regionsReport = getRegionsReport()\n    setRegionsReport(regionsReport)\n\n    const previousRegionsReport = getPreviousRegionsReport()\n    setPreviousRegionsReport(previousRegionsReport)\n\n    const previousDepartementsReport = getPreviousDepartementsReport()\n    setPreviousDepartementsReport(previousDepartementsReport)\n\n    const departementsReport = getDepartementsReport()\n    setDepartementsReport(departementsReport)\n  }, [date, getFranceReport, getPreviousFranceReport, getRegionsReport, getPreviousRegionsReport, getDepartementsReport, getPreviousDepartementsReport])\n\n  useEffect(() => {\n    const mobileWidth = parseInt(theme.mobileDisplay.split('px')[0])\n    if (window.innerWidth < mobileWidth) {\n      setIsMobileDevice(true)\n    }\n\n    window.addEventListener('resize', handleResize)\n\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [])\n\n  useEffect(() => {\n    setIsTouchScreenDevice('ontouchstart' in document.documentElement)\n  }, [])\n\n  const maps = [\n    {\n      name: 'Carte des cas confirmés',\n      category: 'régionale',\n      data: regionsReport,\n      properties: 'casConfirmes',\n      layers: [casConfirmesLayer, casConfirmesCountLayer]\n    },\n    {\n      name: 'Carte des décès à l’hôpital',\n      category: 'régionale',\n      data: regionsReport,\n      properties: 'deces',\n      layers: [decesLayer, decesCountLayer]\n    },\n    {\n      name: 'Carte des hospitalisations',\n      category: 'régionale',\n      properties: 'hospitalises',\n      data: regionsReport,\n      layers: [hospitalisesLayer, hospitalisesCountLayer]\n    },\n    {\n      name: 'Carte des patients en réanimation',\n      category: 'régionale',\n      properties: 'reanimation',\n      data: regionsReport,\n      layers: [reanimationLayer, reanimationCountLayer]\n    },\n    {\n      name: 'Carte des retours à domicile',\n      category: 'régionale',\n      properties: 'gueris',\n      data: regionsReport,\n      layers: [guerisLayer, guerisCountLayer]\n    },\n    // {\n    //   name: 'Carte des cas confirmés',\n    //   category: 'départementale',\n    //   data: departementsReport,\n    //   properties: 'casConfirmes',\n    //   layers: [casConfirmesLayer, casConfirmesCountLayer]\n    // },\n    {\n      name: 'Carte des décès à l’hôpital',\n      category: 'départementale',\n      data: departementsReport,\n      properties: 'deces',\n      layers: [decesLayer, decesCountLayer]\n    },\n    {\n      name: 'Carte des hospitalisations',\n      category: 'départementale',\n      properties: 'hospitalises',\n      data: departementsReport,\n      layers: [hospitalisesLayer, hospitalisesCountLayer]\n    },\n    {\n      name: 'Carte des patients en réanimation',\n      category: 'départementale',\n      properties: 'reanimation',\n      data: departementsReport,\n      layers: [reanimationLayer, reanimationCountLayer]\n    },\n    {\n      name: 'Carte des retours à domicile',\n      category: 'départementale',\n      properties: 'gueris',\n      data: departementsReport,\n      layers: [guerisLayer, guerisCountLayer]\n    }\n  ]\n\n  return (\n    <Page title='Tableau de bord de suivi de l’épidémie de coronavirus en France'>\n\n      <div className='main-page-container'>\n        <AppContext.Provider value={{\n          date,\n          selectedLocationReport,\n          setSelectedLocation,\n          franceReport,\n          previousFranceReport,\n          regionsReport,\n          previousRegionsReport,\n          selectedPreviousLocationReport,\n          departementsReport,\n          previousDepartementsReport,\n          prev: dateIdx > 0 ? previousReport : null,\n          next: dateIdx < dates.length - 1 ? nextReport : null,\n          setViewport,\n          maps,\n          viewport,\n          isIframe,\n          isMobileDevice,\n          isTouchScreenDevice\n        }}\n        >\n          <ThemeContext.Provider value={isGouv ? theme.gouv : theme.default}>\n            {isMobileDevice ? (\n              <MobilePage />\n            ) : (\n              <ScreenPage />\n            )}\n          </ThemeContext.Provider>\n        </AppContext.Provider>\n\n        <style jsx>{`\n          .main-page-container {\n            display: flex;\n            position: absolute;\n            width: 100%;\n            height: 100%;\n          }\n        `}</style>\n      </div>\n    </Page>\n  )\n}\n\nMainPage.propTypes = {\n  data: PropTypes.array.isRequired,\n  isGouv: PropTypes.bool.isRequired,\n  dates: PropTypes.array.isRequired\n}\n\nMainPage.getInitialProps = async () => {\n  return {\n    data: records,\n    isGouv: process.env.GOUV === '1',\n    dates: uniq(records.filter(r => r.code === 'FRA').map(r => r.date)).sort()\n  }\n}\n\nexport default MainPage\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AAEA;AAaA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAAA;AACA;AAAA;AAAA;AAHA;AANA;AAYA;AAAA;AAAA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAilBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AA1BA;AAAA;AAAA;AA0CA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;;;;A","sourceRoot":""}